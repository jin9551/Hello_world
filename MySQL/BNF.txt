BNF(Backus-Naur form)
bnf는 일련의 기호로 구성된 치환 규칙(subsititution rule) 또는 생성 규칙(production rule)의 언어를 사용하고 있다ㅣ
하나의 기호는 각 생성 규칙으로 정의된다.


<>
::=
|
[]
...
{}
"



단말 표현이란 더 이상 유도할 수 없는 표현으로 수식에서 1, 2, …, +, -, *, / 등이 있습니다.

비단말 표현이란 유도가 가능한 표현으로 <digit> 처럼 < >를 이용하여 표현합니다.



< 와 > 기호

비단말 기호는 <>으로 표현된다. 생성 규칙은 모든 비단말 기호를 갖고 있다.
이러한 비단말 기호 명칭은 소문자로 나타낸다. 비단말 기호의 예는 <select statement> 와 <table name>이다.



::= 기호는

::= 기호는 생성 규칙에서 정의(::= 기호의 오른쪽)로부터 정의된(::= 기호의 왼쪽) 비단말 기호를 분리하기 위해서 사용된다. 
::= 기호를 읽을 때는 "으로 정의 된다"라고 한다. 다음의 CLOSE 명령문에 관한 생성 규칙의 예제를 보아라.

<close statement> ::= CLOSE <cursor name>
설명: CLOSE 명령문은 단말 기호 CLOSE와 그 다음에 있는 비단말 기호인 cursor name 이름으로 구성되어 있다.
여기에는 <cursor name>에 대한 생성 규칙이 있다.



| 기호

선택은 | 기호로 표현된다. 다음에는 원소 <character>에 대한 생성 규칙의 예를 보여주고 있다.

<character> ::= <digit> | <letter> | <special symbol>



[ 와 ] 기호

대괄호 내부에는 무엇인가 위치하면 사용할 수도 있다는 것이다.
다시 말하면 필요 없다면 생략할 수 있다는 것이다. 여기에는 ROLLBACK 명령문에 관한 생성 규칙을 보여주고 있다.

<rollback statement> ::= ROLLBACK [WORK]
설명: ROLLBACK 명령문은 항상 ROLLBACK이라는 단어로 구성되고 선택으로 WORK라는 단어를 사용할 수 있다.


... 기호

생략 기호는 무엇인가 한 번 이상 반복된다는 것을 나타낸다. 여기서 보여주는 예제는 정수에 대한 생성 규칙이다.

<integer> ::= <digit> ...
설명: 정수는 일련의 숫자(최소한 하나 이상)로 구성된다.


{ 와 } 기호

중괄호로 감싼 모든 기호는 그룹을 구성한다. 예를 들면, | 기호함께 사용된 중괄호는 선택 대상이 무엇인지 명확하게 보여준다.
다음 예제는 FROM 절에 대한 생성 규칙이다.

<from clause> ::= FROM <table name> [{, <table reference>}...]
설명:FROM 절은 단말 기호 FROM으로 시작되고 그 다음에 적어도 하나의 테이블 참조가 뒤따른다. 
이 테이블 참조와 함께 원소 목록이 따라오는데, 각 원소 목록은 콤마로 분리되어 있다. 그리고 이때 콤마는 SQL의 일부이며 BNF의 표현 방법이 아니다.


" 기호

" 기호와 같은 일부 메타 기호는 SQL 명령문 자체의 특별한 부분이다. 잘못 이해하는 것을 피하기 위해서 이 기호는 이중 인용 부호로 감싼다.
특히, 이는 SQL에서 사용된 "기호의 의미는 생성 규칙에서 """으로 표현된다.