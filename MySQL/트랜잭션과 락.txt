트랜잭션은 작업 처리 전체를 하나의 단위로 묶어서 처리할 수 있게 해주는 것을 말한다.

SQL에서 트랜잭션의 사용은 쿼리 시작 전 상단부에 트랜재션 사용을 선언하고 쿼리를 수행한다.
모든 쿼리가 정상적으로 종료되면 커밋으로 데이터베이스에 데이터를 완결 짓지만, 실패한 경우 롤백하여 트랜잭션 사용 선언부 이하 쿼리를 모두 취소하게 된다.

트랜잭션을 사용할 때 장점
-서버가 깨지거나 하드웨어적인 문제가 발생하더라도 자동 복구 기능이나 백업된 트랜잭션 로그를 이용하여 데이터를 살릴 수 있다.
-commit 명령을 이용하여 여러 개의 SQL문을 하나로 합쳐서 실행시킬 수 있다.

트랜잭션을 사용하지 않았을 때의 단점
-속도가 빠르다
-디스크 용량과 메모리를 적게 차지한다.
-옵션을 주어 트랜잭션 기능을 이용할 수 있다.


1) 트랜잭션의 성격 4가지 ACID 성질

원자성(atomicity) 트랜잭션은 전체의 실행만이 있지 일부 실행으로 트랜잭션의 기능을 가질 수는 없다.
일관성(consistency) 트랜잭션이 그 실행을 성공적으로 완료하면 언제나 일관된 데이터베이스 상태로 된다. 즉. 이 트랜잭션의 실행으로 일관성이 깨지지 않는다.
격리성(isolation) 연산의 중간결과에 다른 트랜잭션이나 작업이 접근할 수 없다.
영속성(durability) 트랜잭션이 일단 그 실행을 성공적으로 끝내면 그 결과는 어떠한 경우에라도 보장받는다.


* 트랜잭션의 사용

begin work 명령어를 실행하여 하나의 트랜잭션을 시작한다.

autocommit이 0으로 설정 되어있으면 rollback이 된다.
모든 작업이 끝나고 commit을 해줘야한다.


락

데이터베이스를 백업하거나 테이블의 스키마 구조를 변경하거나 기타 중요한 작업을 진행할 때 다른 사람이 해당 테이블에 작업을 하지 못하도록 막기 위해 locking을 한다.
트랜잭션이 지원되지 않는 테이블 타입인 MyISAM에는 트랜잭션과 비슷한 lock를 사용한다. 즉 굳이 innoDB 타입으로 트랜잭션을 사용하는 것보다 MyISAM 테이블 타입을 사용하되 
lock tables로 트랜잭션 기능을 구현하는 것이 더 효율적일 수 있다.

mysql의 모든 락은 deadlock-free이다. 언제나 질의를 시작할 때 한번에 모든 필요한 락을 요청하고 언제나 같은 순서대로 테이블에 락을 걸어 관리한다.

lock tables table_name (read or write 선택)


unlock tables 로 락 해제
