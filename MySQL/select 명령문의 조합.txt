제 13 장에서는 각각의 select 명령문의 결과를 임의의 연산자로 어떻게 조합할 것인지 설명하고 있다.
이 때 조합하는 연산자를 집합 연산자(set operator)라 한다.

MySQL은 select 명령문과 조합할 수 있는 집합 연산자로 다음과 같은 연산자를 제공하고 있다. 그러나 아쉽게도 intersect, minus, except 집합연산자를 제공하지 않고 있다.

- UNION
- UNION ALL

* UNION의 조합

만약 2개의 선택 블록이 UNION 연산자로 조합된다면 최종결과는 둘 또는 한 개의 선택 블록의 결과로 행이 구성된다. UNION 집합은 합집합과 동일하다.

UNION 연산자의 특별한 속성은 모든 중복도니 행(동일한 행)이 최종 결과에서 자동적으로 제거된다.


* UNION을 사용하기 위한 규칙

다음은 UNION연산자를 사용하기 위해서 지켜야할 규칙이다.

- 관련된 모든 선택 블록의 select 절은 수식의 수(열의 수)를 동일하게 가져야 한다.
- 최종 결과를 만들어 내는 수식은 서로 비교할 수 있는 자료형이어야 한다.
- order by 절은 마지막 선택 블록에서만 지정할 수 있다. 순서화는 모든 중간 결과가 결합된 후에 전체 최종 결과에서 수행된다.
- select 절은 distinct를 가질 수 없다. SQL은 UNION을 사용했을 때 중복된 행을 자동적으로 삭제한다.



* UNION ALL의 조합 

UNION은 중복된 행을 자동적으로 삭제한다. 중복된 행을 삭제하는 것을 ALL을 사용함으로써 막을 수 있다.

만약 두 개의 선택 블록이 UNION ALL 연산으로 결합된다면 최종 결과는 두 개의 선택 블록에서 생성된 결과로부터 생성된다.
UNION과 UNION ALL의 유일한 차이점은 중복된 행을 그대로 유지하냐 안하냐이다.


최적화 방법
or 는 in 혹은 union으로 대체하자.

update fee
set jang_toal = 10000
where jang_total <=20000
or fee_date = '2019-01-01';

은 아래와 같이 바꿀 수 있다.

update fee
set jang_total = 10000
where jang_total<=20000
union
update fee
set jang_toal = 10000
where fee_date = '2019-01-01';